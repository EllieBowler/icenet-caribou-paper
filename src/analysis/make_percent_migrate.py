"""
Script to compute Sea Ice Concentration (SIC) thresholds and percent migration mappings from observational data.

This script calculates the SIC thresholds that correspond to different levels of migration (percent migrated).
The mappings are generated by interpolating the SIC values associated with different percentages of migration. 
The result is a mapping between the percent migrated and the SIC threshold for that migration level.

The script uses observational data for migration and SIC thresholds, and the following parameters can be specified:
- `data_source`: Specifies the data source for the migration data.
- `n_consec`: Number of consecutive days.
- `smooth_level`: Level of smoothing to apply to the data.
- `train_end`: End year for the training data (default is 2019).
- `day_diff_lim`: Maximum allowed day difference between migration-start point definition.
- `female_only`: Whether to consider only female migration data (default is True).

Outputs:
- A CSV file containing the percent migration data.
- A CSV file containing the SIC threshold mappings for the percent migrated.

Author: Ellie Bowler, eller@bas.ac.uk
"""

import argparse
import numpy as np
import pandas as pd
from scipy import interpolate

import sys
sys.path.append("../../")
from src import config
from src.analysis.metric_utils import get_percent_migrate_df


def make_mapping_df(mig_df):
    """
    Generate a mapping DataFrame for SIC thresholds and percent migration values.

    This function interpolates the SIC thresholds for percent migration levels (0% to 100%),
    based on the observed percent migration and SIC thresholds from the input DataFrame.

    Args:
        mig_df (pd.DataFrame): DataFrame containing 'percent_mig' and 'sic_thresh' columns.

    Returns:
        pd.DataFrame: DataFrame containing 'percent_interp' and 'sic_interp' columns representing
                       interpolated percent migration values and their corresponding SIC thresholds.
    """
    # Interpolate SIC thresholds for percent migration values ranging from 0 to 100
    f = interpolate.interp1d(mig_df.percent_mig * 100, mig_df.sic_thresh, fill_value="extrapolate")
    percent_interp = np.arange(0, 101, 1)  # Generate percent migration values from 0 to 100
    sic_interp = f(percent_interp)  # Interpolate SIC thresholds for the percent migration values
    mapping_df = pd.DataFrame({"percent_interp": percent_interp, "sic_interp": sic_interp})
    
    return mapping_df


if __name__ == "__main__":
    # Define commandline arguments
    parser = argparse.ArgumentParser(description="Compute SIC thresholds and migration mappings from observational data.")
    parser.add_argument("--data_source", type=str, required=True, help="Data source for migration data.")
    parser.add_argument("--n_consec", type=int, required=True, help="Number of consecutive days to define a migration event.")
    parser.add_argument("--smooth_level", type=int, required=True, help="Level of smoothing to apply to the data.")
    parser.add_argument("--train_end", type=int, default=2019, help="End year for the training data (default is 2019).")
    parser.add_argument("--day_diff_lim", type=int, default=3, help="Maximum allowed day difference between consecutive migration events.")
    parser.add_argument("--female_only", type=bool, default=True, help="Whether to consider only female migration data (default is True).")
    
    args = parser.parse_args()

    # Create an empty DataFrame for SIC thresholds
    final_df = pd.DataFrame({"sic_thresh": np.round(np.arange(0.5, 1.01, 0.01), 2)})

    # Get the percent migration DataFrame based on the input arguments
    percent_mig_df = get_percent_migrate_df(args.data_source, n_consec=args.n_consec, smooth_level=args.smooth_level)

    # Create the SIC-threshold to percent-migrated mapping DataFrame
    mapping_df = make_mapping_df(percent_mig_df)

    # Save the percent migration data and the SIC threshold mappings to CSV
    print(f"Saving percent migration data and mapping to {config.PROCESSED_DATA_FOLDER}/"
          f"{args.data_source}_nconsec_{args.n_consec}_smooth_{args.smooth_level}_percent_mig.csv")
    percent_mig_df.to_csv(f"{config.PROCESSED_DATA_FOLDER}/"
                          f"{args.data_source}_nconsec_{args.n_consec}_smooth_{args.smooth_level}_percent_mig.csv")
    
    print(f"Saving SIC to percent migration mappings to {config.PROCESSED_DATA_FOLDER}/"
          f"{args.data_source}_nconsec_{args.n_consec}_smooth_{args.smooth_level}_mapping.csv")
    mapping_df.to_csv(f"{config.PROCESSED_DATA_FOLDER}/"
                      f"{args.data_source}_nconsec_{args.n_consec}_smooth_{args.smooth_level}_mapping.csv")